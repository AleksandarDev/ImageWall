//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace ImageWallWP7.ImageWallServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageDetails", Namespace="http://schemas.datacontract.org/2004/07/ImageWallService")]
    public partial class ImageDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime CreatedField;
        
        private string ExtensionField;
        
        private string HashField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private string NameField;
        
        private long SizeField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> TagsField;
        
        private string UrlField;
        
        private string UrlThumbnailField;
        
        private string UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension {
            get {
                return this.ExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionField, value) != true)) {
                    this.ExtensionField = value;
                    this.RaisePropertyChanged("Extension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hash {
            get {
                return this.HashField;
            }
            set {
                if ((object.ReferenceEquals(this.HashField, value) != true)) {
                    this.HashField = value;
                    this.RaisePropertyChanged("Hash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UrlThumbnail {
            get {
                return this.UrlThumbnailField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlThumbnailField, value) != true)) {
                    this.UrlThumbnailField = value;
                    this.RaisePropertyChanged("UrlThumbnail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImagePartUploadResult", Namespace="http://schemas.datacontract.org/2004/07/ImageWallService")]
    public partial class ImagePartUploadResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Exception ErrorField;
        
        private bool HasErrorField;
        
        private int RecievedPartField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasError {
            get {
                return this.HasErrorField;
            }
            set {
                if ((this.HasErrorField.Equals(value) != true)) {
                    this.HasErrorField = value;
                    this.RaisePropertyChanged("HasError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RecievedPart {
            get {
                return this.RecievedPartField;
            }
            set {
                if ((this.RecievedPartField.Equals(value) != true)) {
                    this.RecievedPartField = value;
                    this.RaisePropertyChanged("RecievedPart");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagModel", Namespace="http://schemas.datacontract.org/2004/07/ImageWallService")]
    public partial class TagModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AliasField;
        
        private System.DateTime DateField;
        
        private bool IsPopularField;
        
        private int SizeField;
        
        private string UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alias {
            get {
                return this.AliasField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasField, value) != true)) {
                    this.AliasField = value;
                    this.RaisePropertyChanged("Alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPopular {
            get {
                return this.IsPopularField;
            }
            set {
                if ((this.IsPopularField.Equals(value) != true)) {
                    this.IsPopularField = value;
                    this.RaisePropertyChanged("IsPopular");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ImageWallServiceReference.IImageWallService")]
    public interface IImageWallService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageWallService/BeginImageUploadREST", ReplyAction="http://tempuri.org/IImageWallService/BeginImageUploadRESTResponse")]
        System.IAsyncResult BeginBeginImageUploadREST(string name, string tag, string hash, string userId, System.DateTime created, double longitude, double latitude, System.AsyncCallback callback, object asyncState);
        
        bool EndBeginImageUploadREST(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageWallService/BeginImageUpload", ReplyAction="http://tempuri.org/IImageWallService/BeginImageUploadResponse")]
        System.IAsyncResult BeginBeginImageUpload(ImageWallWP7.ImageWallServiceReference.ImageDetails details, System.AsyncCallback callback, object asyncState);
        
        bool EndBeginImageUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageWallService/UploadImagePart", ReplyAction="http://tempuri.org/IImageWallService/UploadImagePartResponse")]
        System.IAsyncResult BeginUploadImagePart(int index, byte[] imageBytes, System.AsyncCallback callback, object asyncState);
        
        ImageWallWP7.ImageWallServiceReference.ImagePartUploadResult EndUploadImagePart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageWallService/GetAllTags", ReplyAction="http://tempuri.org/IImageWallService/GetAllTagsResponse")]
        System.IAsyncResult BeginGetAllTags(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.TagModel> EndGetAllTags(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageWallService/GetTagModified", ReplyAction="http://tempuri.org/IImageWallService/GetTagModifiedResponse")]
        System.IAsyncResult BeginGetTagModified(string tag, System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetTagModified(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageWallService/GetNearbyTags", ReplyAction="http://tempuri.org/IImageWallService/GetNearbyTagsResponse")]
        System.IAsyncResult BeginGetNearbyTags(double latitude, double longitude, double distance, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetNearbyTags(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageWallService/GetImagesByDate", ReplyAction="http://tempuri.org/IImageWallService/GetImagesByDateResponse")]
        System.IAsyncResult BeginGetImagesByDate(string startDate, string endDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> EndGetImagesByDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageWallService/GetImagesByAmount", ReplyAction="http://tempuri.org/IImageWallService/GetImagesByAmountResponse")]
        System.IAsyncResult BeginGetImagesByAmount(int maxAmount, int skip, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> EndGetImagesByAmount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageWallService/GetImagesByTagDate", ReplyAction="http://tempuri.org/IImageWallService/GetImagesByTagDateResponse")]
        System.IAsyncResult BeginGetImagesByTagDate(string tag, string startDate, string endDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> EndGetImagesByTagDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageWallService/GetImagesByTagAmount", ReplyAction="http://tempuri.org/IImageWallService/GetImagesByTagAmountResponse")]
        System.IAsyncResult BeginGetImagesByTagAmount(string tag, int maxAmount, int skip, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> EndGetImagesByTagAmount(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImageWallServiceChannel : ImageWallWP7.ImageWallServiceReference.IImageWallService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BeginImageUploadRESTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BeginImageUploadRESTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BeginImageUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BeginImageUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadImagePartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadImagePartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImageWallWP7.ImageWallServiceReference.ImagePartUploadResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImageWallWP7.ImageWallServiceReference.ImagePartUploadResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllTagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllTagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.TagModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.TagModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagModifiedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagModifiedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNearbyTagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNearbyTagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetImagesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetImagesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetImagesByAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetImagesByAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetImagesByTagDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetImagesByTagDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetImagesByTagAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetImagesByTagAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageWallServiceClient : System.ServiceModel.ClientBase<ImageWallWP7.ImageWallServiceReference.IImageWallService>, ImageWallWP7.ImageWallServiceReference.IImageWallService {
        
        private BeginOperationDelegate onBeginBeginImageUploadRESTDelegate;
        
        private EndOperationDelegate onEndBeginImageUploadRESTDelegate;
        
        private System.Threading.SendOrPostCallback onBeginImageUploadRESTCompletedDelegate;
        
        private BeginOperationDelegate onBeginBeginImageUploadDelegate;
        
        private EndOperationDelegate onEndBeginImageUploadDelegate;
        
        private System.Threading.SendOrPostCallback onBeginImageUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadImagePartDelegate;
        
        private EndOperationDelegate onEndUploadImagePartDelegate;
        
        private System.Threading.SendOrPostCallback onUploadImagePartCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllTagsDelegate;
        
        private EndOperationDelegate onEndGetAllTagsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllTagsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagModifiedDelegate;
        
        private EndOperationDelegate onEndGetTagModifiedDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagModifiedCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNearbyTagsDelegate;
        
        private EndOperationDelegate onEndGetNearbyTagsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNearbyTagsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetImagesByDateDelegate;
        
        private EndOperationDelegate onEndGetImagesByDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetImagesByDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetImagesByAmountDelegate;
        
        private EndOperationDelegate onEndGetImagesByAmountDelegate;
        
        private System.Threading.SendOrPostCallback onGetImagesByAmountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetImagesByTagDateDelegate;
        
        private EndOperationDelegate onEndGetImagesByTagDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetImagesByTagDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetImagesByTagAmountDelegate;
        
        private EndOperationDelegate onEndGetImagesByTagAmountDelegate;
        
        private System.Threading.SendOrPostCallback onGetImagesByTagAmountCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ImageWallServiceClient() {
        }
        
        public ImageWallServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImageWallServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageWallServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageWallServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<BeginImageUploadRESTCompletedEventArgs> BeginImageUploadRESTCompleted;
        
        public event System.EventHandler<BeginImageUploadCompletedEventArgs> BeginImageUploadCompleted;
        
        public event System.EventHandler<UploadImagePartCompletedEventArgs> UploadImagePartCompleted;
        
        public event System.EventHandler<GetAllTagsCompletedEventArgs> GetAllTagsCompleted;
        
        public event System.EventHandler<GetTagModifiedCompletedEventArgs> GetTagModifiedCompleted;
        
        public event System.EventHandler<GetNearbyTagsCompletedEventArgs> GetNearbyTagsCompleted;
        
        public event System.EventHandler<GetImagesByDateCompletedEventArgs> GetImagesByDateCompleted;
        
        public event System.EventHandler<GetImagesByAmountCompletedEventArgs> GetImagesByAmountCompleted;
        
        public event System.EventHandler<GetImagesByTagDateCompletedEventArgs> GetImagesByTagDateCompleted;
        
        public event System.EventHandler<GetImagesByTagAmountCompletedEventArgs> GetImagesByTagAmountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImageWallWP7.ImageWallServiceReference.IImageWallService.BeginBeginImageUploadREST(string name, string tag, string hash, string userId, System.DateTime created, double longitude, double latitude, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBeginImageUploadREST(name, tag, hash, userId, created, longitude, latitude, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool ImageWallWP7.ImageWallServiceReference.IImageWallService.EndBeginImageUploadREST(System.IAsyncResult result) {
            return base.Channel.EndBeginImageUploadREST(result);
        }
        
        private System.IAsyncResult OnBeginBeginImageUploadREST(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            string tag = ((string)(inValues[1]));
            string hash = ((string)(inValues[2]));
            string userId = ((string)(inValues[3]));
            System.DateTime created = ((System.DateTime)(inValues[4]));
            double longitude = ((double)(inValues[5]));
            double latitude = ((double)(inValues[6]));
            return ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).BeginBeginImageUploadREST(name, tag, hash, userId, created, longitude, latitude, callback, asyncState);
        }
        
        private object[] OnEndBeginImageUploadREST(System.IAsyncResult result) {
            bool retVal = ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).EndBeginImageUploadREST(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBeginImageUploadRESTCompleted(object state) {
            if ((this.BeginImageUploadRESTCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BeginImageUploadRESTCompleted(this, new BeginImageUploadRESTCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BeginImageUploadRESTAsync(string name, string tag, string hash, string userId, System.DateTime created, double longitude, double latitude) {
            this.BeginImageUploadRESTAsync(name, tag, hash, userId, created, longitude, latitude, null);
        }
        
        public void BeginImageUploadRESTAsync(string name, string tag, string hash, string userId, System.DateTime created, double longitude, double latitude, object userState) {
            if ((this.onBeginBeginImageUploadRESTDelegate == null)) {
                this.onBeginBeginImageUploadRESTDelegate = new BeginOperationDelegate(this.OnBeginBeginImageUploadREST);
            }
            if ((this.onEndBeginImageUploadRESTDelegate == null)) {
                this.onEndBeginImageUploadRESTDelegate = new EndOperationDelegate(this.OnEndBeginImageUploadREST);
            }
            if ((this.onBeginImageUploadRESTCompletedDelegate == null)) {
                this.onBeginImageUploadRESTCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBeginImageUploadRESTCompleted);
            }
            base.InvokeAsync(this.onBeginBeginImageUploadRESTDelegate, new object[] {
                        name,
                        tag,
                        hash,
                        userId,
                        created,
                        longitude,
                        latitude}, this.onEndBeginImageUploadRESTDelegate, this.onBeginImageUploadRESTCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImageWallWP7.ImageWallServiceReference.IImageWallService.BeginBeginImageUpload(ImageWallWP7.ImageWallServiceReference.ImageDetails details, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBeginImageUpload(details, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool ImageWallWP7.ImageWallServiceReference.IImageWallService.EndBeginImageUpload(System.IAsyncResult result) {
            return base.Channel.EndBeginImageUpload(result);
        }
        
        private System.IAsyncResult OnBeginBeginImageUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ImageWallWP7.ImageWallServiceReference.ImageDetails details = ((ImageWallWP7.ImageWallServiceReference.ImageDetails)(inValues[0]));
            return ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).BeginBeginImageUpload(details, callback, asyncState);
        }
        
        private object[] OnEndBeginImageUpload(System.IAsyncResult result) {
            bool retVal = ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).EndBeginImageUpload(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBeginImageUploadCompleted(object state) {
            if ((this.BeginImageUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BeginImageUploadCompleted(this, new BeginImageUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BeginImageUploadAsync(ImageWallWP7.ImageWallServiceReference.ImageDetails details) {
            this.BeginImageUploadAsync(details, null);
        }
        
        public void BeginImageUploadAsync(ImageWallWP7.ImageWallServiceReference.ImageDetails details, object userState) {
            if ((this.onBeginBeginImageUploadDelegate == null)) {
                this.onBeginBeginImageUploadDelegate = new BeginOperationDelegate(this.OnBeginBeginImageUpload);
            }
            if ((this.onEndBeginImageUploadDelegate == null)) {
                this.onEndBeginImageUploadDelegate = new EndOperationDelegate(this.OnEndBeginImageUpload);
            }
            if ((this.onBeginImageUploadCompletedDelegate == null)) {
                this.onBeginImageUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBeginImageUploadCompleted);
            }
            base.InvokeAsync(this.onBeginBeginImageUploadDelegate, new object[] {
                        details}, this.onEndBeginImageUploadDelegate, this.onBeginImageUploadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImageWallWP7.ImageWallServiceReference.IImageWallService.BeginUploadImagePart(int index, byte[] imageBytes, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadImagePart(index, imageBytes, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImageWallWP7.ImageWallServiceReference.ImagePartUploadResult ImageWallWP7.ImageWallServiceReference.IImageWallService.EndUploadImagePart(System.IAsyncResult result) {
            return base.Channel.EndUploadImagePart(result);
        }
        
        private System.IAsyncResult OnBeginUploadImagePart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int index = ((int)(inValues[0]));
            byte[] imageBytes = ((byte[])(inValues[1]));
            return ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).BeginUploadImagePart(index, imageBytes, callback, asyncState);
        }
        
        private object[] OnEndUploadImagePart(System.IAsyncResult result) {
            ImageWallWP7.ImageWallServiceReference.ImagePartUploadResult retVal = ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).EndUploadImagePart(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadImagePartCompleted(object state) {
            if ((this.UploadImagePartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadImagePartCompleted(this, new UploadImagePartCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadImagePartAsync(int index, byte[] imageBytes) {
            this.UploadImagePartAsync(index, imageBytes, null);
        }
        
        public void UploadImagePartAsync(int index, byte[] imageBytes, object userState) {
            if ((this.onBeginUploadImagePartDelegate == null)) {
                this.onBeginUploadImagePartDelegate = new BeginOperationDelegate(this.OnBeginUploadImagePart);
            }
            if ((this.onEndUploadImagePartDelegate == null)) {
                this.onEndUploadImagePartDelegate = new EndOperationDelegate(this.OnEndUploadImagePart);
            }
            if ((this.onUploadImagePartCompletedDelegate == null)) {
                this.onUploadImagePartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadImagePartCompleted);
            }
            base.InvokeAsync(this.onBeginUploadImagePartDelegate, new object[] {
                        index,
                        imageBytes}, this.onEndUploadImagePartDelegate, this.onUploadImagePartCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImageWallWP7.ImageWallServiceReference.IImageWallService.BeginGetAllTags(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllTags(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.TagModel> ImageWallWP7.ImageWallServiceReference.IImageWallService.EndGetAllTags(System.IAsyncResult result) {
            return base.Channel.EndGetAllTags(result);
        }
        
        private System.IAsyncResult OnBeginGetAllTags(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).BeginGetAllTags(callback, asyncState);
        }
        
        private object[] OnEndGetAllTags(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.TagModel> retVal = ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).EndGetAllTags(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllTagsCompleted(object state) {
            if ((this.GetAllTagsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllTagsCompleted(this, new GetAllTagsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllTagsAsync() {
            this.GetAllTagsAsync(null);
        }
        
        public void GetAllTagsAsync(object userState) {
            if ((this.onBeginGetAllTagsDelegate == null)) {
                this.onBeginGetAllTagsDelegate = new BeginOperationDelegate(this.OnBeginGetAllTags);
            }
            if ((this.onEndGetAllTagsDelegate == null)) {
                this.onEndGetAllTagsDelegate = new EndOperationDelegate(this.OnEndGetAllTags);
            }
            if ((this.onGetAllTagsCompletedDelegate == null)) {
                this.onGetAllTagsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllTagsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllTagsDelegate, null, this.onEndGetAllTagsDelegate, this.onGetAllTagsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImageWallWP7.ImageWallServiceReference.IImageWallService.BeginGetTagModified(string tag, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagModified(tag, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime ImageWallWP7.ImageWallServiceReference.IImageWallService.EndGetTagModified(System.IAsyncResult result) {
            return base.Channel.EndGetTagModified(result);
        }
        
        private System.IAsyncResult OnBeginGetTagModified(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tag = ((string)(inValues[0]));
            return ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).BeginGetTagModified(tag, callback, asyncState);
        }
        
        private object[] OnEndGetTagModified(System.IAsyncResult result) {
            System.DateTime retVal = ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).EndGetTagModified(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagModifiedCompleted(object state) {
            if ((this.GetTagModifiedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagModifiedCompleted(this, new GetTagModifiedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagModifiedAsync(string tag) {
            this.GetTagModifiedAsync(tag, null);
        }
        
        public void GetTagModifiedAsync(string tag, object userState) {
            if ((this.onBeginGetTagModifiedDelegate == null)) {
                this.onBeginGetTagModifiedDelegate = new BeginOperationDelegate(this.OnBeginGetTagModified);
            }
            if ((this.onEndGetTagModifiedDelegate == null)) {
                this.onEndGetTagModifiedDelegate = new EndOperationDelegate(this.OnEndGetTagModified);
            }
            if ((this.onGetTagModifiedCompletedDelegate == null)) {
                this.onGetTagModifiedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagModifiedCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagModifiedDelegate, new object[] {
                        tag}, this.onEndGetTagModifiedDelegate, this.onGetTagModifiedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImageWallWP7.ImageWallServiceReference.IImageWallService.BeginGetNearbyTags(double latitude, double longitude, double distance, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNearbyTags(latitude, longitude, distance, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> ImageWallWP7.ImageWallServiceReference.IImageWallService.EndGetNearbyTags(System.IAsyncResult result) {
            return base.Channel.EndGetNearbyTags(result);
        }
        
        private System.IAsyncResult OnBeginGetNearbyTags(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double latitude = ((double)(inValues[0]));
            double longitude = ((double)(inValues[1]));
            double distance = ((double)(inValues[2]));
            return ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).BeginGetNearbyTags(latitude, longitude, distance, callback, asyncState);
        }
        
        private object[] OnEndGetNearbyTags(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).EndGetNearbyTags(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNearbyTagsCompleted(object state) {
            if ((this.GetNearbyTagsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNearbyTagsCompleted(this, new GetNearbyTagsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNearbyTagsAsync(double latitude, double longitude, double distance) {
            this.GetNearbyTagsAsync(latitude, longitude, distance, null);
        }
        
        public void GetNearbyTagsAsync(double latitude, double longitude, double distance, object userState) {
            if ((this.onBeginGetNearbyTagsDelegate == null)) {
                this.onBeginGetNearbyTagsDelegate = new BeginOperationDelegate(this.OnBeginGetNearbyTags);
            }
            if ((this.onEndGetNearbyTagsDelegate == null)) {
                this.onEndGetNearbyTagsDelegate = new EndOperationDelegate(this.OnEndGetNearbyTags);
            }
            if ((this.onGetNearbyTagsCompletedDelegate == null)) {
                this.onGetNearbyTagsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNearbyTagsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNearbyTagsDelegate, new object[] {
                        latitude,
                        longitude,
                        distance}, this.onEndGetNearbyTagsDelegate, this.onGetNearbyTagsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImageWallWP7.ImageWallServiceReference.IImageWallService.BeginGetImagesByDate(string startDate, string endDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetImagesByDate(startDate, endDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> ImageWallWP7.ImageWallServiceReference.IImageWallService.EndGetImagesByDate(System.IAsyncResult result) {
            return base.Channel.EndGetImagesByDate(result);
        }
        
        private System.IAsyncResult OnBeginGetImagesByDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string startDate = ((string)(inValues[0]));
            string endDate = ((string)(inValues[1]));
            return ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).BeginGetImagesByDate(startDate, endDate, callback, asyncState);
        }
        
        private object[] OnEndGetImagesByDate(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> retVal = ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).EndGetImagesByDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetImagesByDateCompleted(object state) {
            if ((this.GetImagesByDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetImagesByDateCompleted(this, new GetImagesByDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetImagesByDateAsync(string startDate, string endDate) {
            this.GetImagesByDateAsync(startDate, endDate, null);
        }
        
        public void GetImagesByDateAsync(string startDate, string endDate, object userState) {
            if ((this.onBeginGetImagesByDateDelegate == null)) {
                this.onBeginGetImagesByDateDelegate = new BeginOperationDelegate(this.OnBeginGetImagesByDate);
            }
            if ((this.onEndGetImagesByDateDelegate == null)) {
                this.onEndGetImagesByDateDelegate = new EndOperationDelegate(this.OnEndGetImagesByDate);
            }
            if ((this.onGetImagesByDateCompletedDelegate == null)) {
                this.onGetImagesByDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetImagesByDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetImagesByDateDelegate, new object[] {
                        startDate,
                        endDate}, this.onEndGetImagesByDateDelegate, this.onGetImagesByDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImageWallWP7.ImageWallServiceReference.IImageWallService.BeginGetImagesByAmount(int maxAmount, int skip, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetImagesByAmount(maxAmount, skip, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> ImageWallWP7.ImageWallServiceReference.IImageWallService.EndGetImagesByAmount(System.IAsyncResult result) {
            return base.Channel.EndGetImagesByAmount(result);
        }
        
        private System.IAsyncResult OnBeginGetImagesByAmount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int maxAmount = ((int)(inValues[0]));
            int skip = ((int)(inValues[1]));
            return ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).BeginGetImagesByAmount(maxAmount, skip, callback, asyncState);
        }
        
        private object[] OnEndGetImagesByAmount(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> retVal = ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).EndGetImagesByAmount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetImagesByAmountCompleted(object state) {
            if ((this.GetImagesByAmountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetImagesByAmountCompleted(this, new GetImagesByAmountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetImagesByAmountAsync(int maxAmount, int skip) {
            this.GetImagesByAmountAsync(maxAmount, skip, null);
        }
        
        public void GetImagesByAmountAsync(int maxAmount, int skip, object userState) {
            if ((this.onBeginGetImagesByAmountDelegate == null)) {
                this.onBeginGetImagesByAmountDelegate = new BeginOperationDelegate(this.OnBeginGetImagesByAmount);
            }
            if ((this.onEndGetImagesByAmountDelegate == null)) {
                this.onEndGetImagesByAmountDelegate = new EndOperationDelegate(this.OnEndGetImagesByAmount);
            }
            if ((this.onGetImagesByAmountCompletedDelegate == null)) {
                this.onGetImagesByAmountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetImagesByAmountCompleted);
            }
            base.InvokeAsync(this.onBeginGetImagesByAmountDelegate, new object[] {
                        maxAmount,
                        skip}, this.onEndGetImagesByAmountDelegate, this.onGetImagesByAmountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImageWallWP7.ImageWallServiceReference.IImageWallService.BeginGetImagesByTagDate(string tag, string startDate, string endDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetImagesByTagDate(tag, startDate, endDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> ImageWallWP7.ImageWallServiceReference.IImageWallService.EndGetImagesByTagDate(System.IAsyncResult result) {
            return base.Channel.EndGetImagesByTagDate(result);
        }
        
        private System.IAsyncResult OnBeginGetImagesByTagDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tag = ((string)(inValues[0]));
            string startDate = ((string)(inValues[1]));
            string endDate = ((string)(inValues[2]));
            return ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).BeginGetImagesByTagDate(tag, startDate, endDate, callback, asyncState);
        }
        
        private object[] OnEndGetImagesByTagDate(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> retVal = ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).EndGetImagesByTagDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetImagesByTagDateCompleted(object state) {
            if ((this.GetImagesByTagDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetImagesByTagDateCompleted(this, new GetImagesByTagDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetImagesByTagDateAsync(string tag, string startDate, string endDate) {
            this.GetImagesByTagDateAsync(tag, startDate, endDate, null);
        }
        
        public void GetImagesByTagDateAsync(string tag, string startDate, string endDate, object userState) {
            if ((this.onBeginGetImagesByTagDateDelegate == null)) {
                this.onBeginGetImagesByTagDateDelegate = new BeginOperationDelegate(this.OnBeginGetImagesByTagDate);
            }
            if ((this.onEndGetImagesByTagDateDelegate == null)) {
                this.onEndGetImagesByTagDateDelegate = new EndOperationDelegate(this.OnEndGetImagesByTagDate);
            }
            if ((this.onGetImagesByTagDateCompletedDelegate == null)) {
                this.onGetImagesByTagDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetImagesByTagDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetImagesByTagDateDelegate, new object[] {
                        tag,
                        startDate,
                        endDate}, this.onEndGetImagesByTagDateDelegate, this.onGetImagesByTagDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImageWallWP7.ImageWallServiceReference.IImageWallService.BeginGetImagesByTagAmount(string tag, int maxAmount, int skip, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetImagesByTagAmount(tag, maxAmount, skip, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> ImageWallWP7.ImageWallServiceReference.IImageWallService.EndGetImagesByTagAmount(System.IAsyncResult result) {
            return base.Channel.EndGetImagesByTagAmount(result);
        }
        
        private System.IAsyncResult OnBeginGetImagesByTagAmount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tag = ((string)(inValues[0]));
            int maxAmount = ((int)(inValues[1]));
            int skip = ((int)(inValues[2]));
            return ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).BeginGetImagesByTagAmount(tag, maxAmount, skip, callback, asyncState);
        }
        
        private object[] OnEndGetImagesByTagAmount(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> retVal = ((ImageWallWP7.ImageWallServiceReference.IImageWallService)(this)).EndGetImagesByTagAmount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetImagesByTagAmountCompleted(object state) {
            if ((this.GetImagesByTagAmountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetImagesByTagAmountCompleted(this, new GetImagesByTagAmountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetImagesByTagAmountAsync(string tag, int maxAmount, int skip) {
            this.GetImagesByTagAmountAsync(tag, maxAmount, skip, null);
        }
        
        public void GetImagesByTagAmountAsync(string tag, int maxAmount, int skip, object userState) {
            if ((this.onBeginGetImagesByTagAmountDelegate == null)) {
                this.onBeginGetImagesByTagAmountDelegate = new BeginOperationDelegate(this.OnBeginGetImagesByTagAmount);
            }
            if ((this.onEndGetImagesByTagAmountDelegate == null)) {
                this.onEndGetImagesByTagAmountDelegate = new EndOperationDelegate(this.OnEndGetImagesByTagAmount);
            }
            if ((this.onGetImagesByTagAmountCompletedDelegate == null)) {
                this.onGetImagesByTagAmountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetImagesByTagAmountCompleted);
            }
            base.InvokeAsync(this.onBeginGetImagesByTagAmountDelegate, new object[] {
                        tag,
                        maxAmount,
                        skip}, this.onEndGetImagesByTagAmountDelegate, this.onGetImagesByTagAmountCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ImageWallWP7.ImageWallServiceReference.IImageWallService CreateChannel() {
            return new ImageWallServiceClientChannel(this);
        }
        
        private class ImageWallServiceClientChannel : ChannelBase<ImageWallWP7.ImageWallServiceReference.IImageWallService>, ImageWallWP7.ImageWallServiceReference.IImageWallService {
            
            public ImageWallServiceClientChannel(System.ServiceModel.ClientBase<ImageWallWP7.ImageWallServiceReference.IImageWallService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginBeginImageUploadREST(string name, string tag, string hash, string userId, System.DateTime created, double longitude, double latitude, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = name;
                _args[1] = tag;
                _args[2] = hash;
                _args[3] = userId;
                _args[4] = created;
                _args[5] = longitude;
                _args[6] = latitude;
                System.IAsyncResult _result = base.BeginInvoke("BeginImageUploadREST", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndBeginImageUploadREST(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("BeginImageUploadREST", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBeginImageUpload(ImageWallWP7.ImageWallServiceReference.ImageDetails details, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = details;
                System.IAsyncResult _result = base.BeginInvoke("BeginImageUpload", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndBeginImageUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("BeginImageUpload", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadImagePart(int index, byte[] imageBytes, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = index;
                _args[1] = imageBytes;
                System.IAsyncResult _result = base.BeginInvoke("UploadImagePart", _args, callback, asyncState);
                return _result;
            }
            
            public ImageWallWP7.ImageWallServiceReference.ImagePartUploadResult EndUploadImagePart(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImageWallWP7.ImageWallServiceReference.ImagePartUploadResult _result = ((ImageWallWP7.ImageWallServiceReference.ImagePartUploadResult)(base.EndInvoke("UploadImagePart", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllTags(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllTags", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.TagModel> EndGetAllTags(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.TagModel> _result = ((System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.TagModel>)(base.EndInvoke("GetAllTags", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTagModified(string tag, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tag;
                System.IAsyncResult _result = base.BeginInvoke("GetTagModified", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetTagModified(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetTagModified", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNearbyTags(double latitude, double longitude, double distance, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = latitude;
                _args[1] = longitude;
                _args[2] = distance;
                System.IAsyncResult _result = base.BeginInvoke("GetNearbyTags", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetNearbyTags(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetNearbyTags", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetImagesByDate(string startDate, string endDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = startDate;
                _args[1] = endDate;
                System.IAsyncResult _result = base.BeginInvoke("GetImagesByDate", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> EndGetImagesByDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> _result = ((System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails>)(base.EndInvoke("GetImagesByDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetImagesByAmount(int maxAmount, int skip, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = maxAmount;
                _args[1] = skip;
                System.IAsyncResult _result = base.BeginInvoke("GetImagesByAmount", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> EndGetImagesByAmount(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> _result = ((System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails>)(base.EndInvoke("GetImagesByAmount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetImagesByTagDate(string tag, string startDate, string endDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = tag;
                _args[1] = startDate;
                _args[2] = endDate;
                System.IAsyncResult _result = base.BeginInvoke("GetImagesByTagDate", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> EndGetImagesByTagDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> _result = ((System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails>)(base.EndInvoke("GetImagesByTagDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetImagesByTagAmount(string tag, int maxAmount, int skip, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = tag;
                _args[1] = maxAmount;
                _args[2] = skip;
                System.IAsyncResult _result = base.BeginInvoke("GetImagesByTagAmount", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> EndGetImagesByTagAmount(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails> _result = ((System.Collections.ObjectModel.ObservableCollection<ImageWallWP7.ImageWallServiceReference.ImageDetails>)(base.EndInvoke("GetImagesByTagAmount", _args, result)));
                return _result;
            }
        }
    }
}
